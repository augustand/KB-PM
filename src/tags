!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
Process	process.h	/^struct Process{$/;"	s	language:C++
Process::cmd	process.h	/^    char* cmd;$/;"	m	language:C++	struct:Process	access:public
Process::is_running	process.h	/^    int is_running; \/* 0 for false, 1 for true*\/$/;"	m	language:C++	struct:Process	access:public
Process::next	process.h	/^    struct Process* next;$/;"	m	language:C++	struct:Process	typeref:struct:Process::Process	access:public
Process::pid	process.h	/^    pid_t pid;$/;"	m	language:C++	struct:Process	access:public
Status	process.h	/^struct Status{$/;"	s	language:C++
Status::app_name	process.h	/^    char *app_name;$/;"	m	language:C++	struct:Status	access:public
Status::memory	process.h	/^    char *memory;$/;"	m	language:C++	struct:Status	access:public
Status::restart_times	process.h	/^    int restart_times;$/;"	m	language:C++	struct:Status	access:public
Status::uptime	process.h	/^    time_t uptime;$/;"	m	language:C++	struct:Status	access:public
__CLIENT_H	client.h	2;"	d	language:C++
__PROCESS_H	process.h	2;"	d	language:C++
__SERVER_H	server.h	2;"	d	language:C++
app_name	process.h	/^    char *app_name;$/;"	m	language:C++	struct:Status	access:public
buffer_str	process.c	/^    char* buffer_str;$/;"	l	language:C++
cmd	process.h	/^    char* cmd;$/;"	m	language:C++	struct:Process	access:public
exec_process	process.c	/^void exec_process(struct Process *process, int* status)$/;"	f	language:C++	signature:(struct Process *process, int* status)
exec_process	process.h	/^extern void exec_process(struct Process*, int*);$/;"	p	language:C++	signature:(struct Process*, int*)
get_process_status	process.h	/^extern void get_process_status(struct Process*, struct Status*);$/;"	p	language:C++	signature:(struct Process*, struct Status*)
is_running	process.h	/^    int is_running; \/* 0 for false, 1 for true*\/$/;"	m	language:C++	struct:Process	access:public
kill_process	process.c	/^void kill_process(struct Process *process, int* status)$/;"	f	language:C++	signature:(struct Process *process, int* status)
kill_process	process.h	/^extern void kill_process(struct Process*, int*);$/;"	p	language:C++	signature:(struct Process*, int*)
main	kb_pm.c	/^int main(int argc, char** argv)$/;"	f	language:C++	signature:(int argc, char** argv)
memory	process.h	/^    char *memory;$/;"	m	language:C++	struct:Status	access:public
next	process.h	/^    struct Process* next;$/;"	m	language:C++	struct:Process	typeref:struct:Process::Process	access:public
parse_process_list	process.c	/^void parse_process_list(const char* path, struct Process** process_list)$/;"	f	language:C++	signature:(const char* path, struct Process** process_list)
parse_process_list	process.h	/^extern void parse_process_list(const char* path, struct Process**);$/;"	p	language:C++	signature:(const char* path, struct Process**)
pid	process.h	/^    pid_t pid;$/;"	m	language:C++	struct:Process	access:public
pid	server.c	/^    pid_t pid;$/;"	l	language:C++
process_str	process.c	/^    char process_str[256][80];$/;"	l	language:C++
restart_times	process.h	/^    int restart_times;$/;"	m	language:C++	struct:Status	access:public
service_start	server.c	/^void service_start(void)$/;"	f	language:C++	signature:(void)
service_start	server.h	/^extern void service_start();$/;"	p	language:C++	signature:()
service_stop	server.c	/^void service_stop()$/;"	f	language:C++	signature:()
service_stop	server.h	/^extern void service_stop();$/;"	p	language:C++	signature:()
show_status	client.h	/^extern void show_status(void);$/;"	p	language:C++	signature:(void)
start_all	client.h	/^extern void start_all(void);$/;"	p	language:C++	signature:(void)
start_process	client.h	/^extern void start_process(Process *process);$/;"	p	language:C++	signature:(Process *process)
stop_all	client.h	/^extern void stop_all(void);$/;"	p	language:C++	signature:(void)
stop_process	client.h	/^extern void stop_process(Process *process);$/;"	p	language:C++	signature:(Process *process)
uptime	process.h	/^    time_t uptime;$/;"	m	language:C++	struct:Status	access:public
